<apex:page >
    <apex:composition template="OrgCheck_PageTemplate_VFT">
        <apex:define name="html_additional_scripttags" />
        <apex:define name="text_page_title">
            Apex Classes and Triggers
        </apex:define>
        <apex:define name="text_page_subtitle">
            Apex Classes and Triggers Overview
        </apex:define>
        <apex:define name="html_actions">
            <div class="slds-page-header__control">
                <a href="/01p" target="_blank">
                    <button class="slds-button slds-button_icon slds-button_icon-border-filled" title="Compile all">
                        <svg class="slds-button__icon" aria-hidden="true">
                            <use href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#apex_plugin')}"></use>
                        </svg>
                        <span class="slds-assistive-text">Compile all</span>
                    </button>
                </a>
            </div>
            <div class="slds-page-header__control">
                <a href="/ui/setup/apex/ApexTestQueuePage" target="_blank">
                    <button class="slds-button slds-button_icon slds-button_icon-border-filled" title="Unit Tests">
                        <svg class="slds-button__icon" aria-hidden="true">
                            <use href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#checkout')}"></use>
                        </svg>
                        <span class="slds-assistive-text">Unit Tests</span>
                    </button>
                </a>
            </div>
        </apex:define>
        <apex:define name="html_content_core">
            <div class="slds-tabs_default">
                <ul class="slds-tabs_default__nav" role="tablist">
                    <li class="slds-tabs_default__item slds-is-active" title="Classes" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-default-classes" id="tab-default-classes__item">Classes</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Triggers" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-triggers" id="tab-default-triggers__item">Triggers</a>
                    </li>
                </ul>
                <div id="tab-default-classes" class="slds-tabs_default__content slds-show" role="tabpanel" aria-labelledby="tab-default-classes__item">
                    <div id="datatable-classes" />
                </div>
                <div id="tab-default-triggers" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-triggers__item">
                    <div id="datatable-triggers" />
                </div>
            </div>
        </apex:define>
        <apex:define name="html_start_definition_script">
            <script>
                function start2(controller, helper) {

                    // Initialize TABS bindings
                    helper.html.tabs.initialize('slds-tabs_default__item', 'slds-tabs_default__content', 'slds-button');

                    // RUN CONTROLLER
                    controller.run({
                        datasets: [ 'apexClasses', 'apexTriggers', 'customObjects' ],
                        dependencies: true,
                        onRecords: function(map) { 

                            let countRecompileApexClasses = 0;

                            // Render the Apex Classes data in a table
                            helper.html.datatable.create({
                                element: 'datatable-classes',
                                columns: [
                                    { name: 'Name', formula: (r) => { return helper.html.render.link('/'+r.id, r.name); }},
                                    { name: 'Score', type: 'numeric', formula: (r) => {
                                        let score = 0;
                                        if (!map.dependencies[r.id]) score++;
                                        if (r.isApiVersionOld === true) score++;
                                        if (r.isSharingMissing === true) score++;
                                        if (r.needsRecompilation === true) score++;
                                        if (!r.fastCoverage || r.fastCoverage < 0.85) score++;
                                        return score;
                                    }},
                                    { name: 'API', type: 'numeric', formula: (r) => {
                                        if (r.isApiVersionOld === true)
                                            return helper.html.render.icon('redFlag') + ' ' + r.apiVersion;
                                        return r.apiVersion;
                                    }},
                                    { name: 'Package', property: 'namespace' },
                                    { name: 'Status', formula: (r) => {
                                        if (r.needsRecompilation === true) {
                                            countRecompileApexClasses++;
                                            return helper.html.render.icon('redFlag') + ' Recompile!';
                                        }
                                        return helper.html.render.icon('greenFlag') + ' OK';
                                    }},
                                    { name: 'Access', property: 'specifiedAccess' },
                                    { name: 'Abst.', property: 'isAbstract', formula: (r) => { return helper.html.render.checkbox(r.isAbstract); }},
                                    { name: 'Type', property: 'isInterface', formula: (r) => { return r.isInterface === false ? 'Class' : 'Interface'; }},
                                    { name: 'Intf.', formula: (r) => {
                                        let html = ''; 
                                        if (r.interfaces) { r.interfaces.forEach(e => html += e + '<br />'); }
                                        return html;
                                    }},
                                    { name: 'Size', type: 'numeric', property: 'length' },
                                    { name: 'Methods', type: 'numeric', property: 'methodsCount' },
                                    { name: 'Inner Cls.', type: 'numeric', property: 'innerClassesCount' },
                                    { name: 'Annot.', formula: (r) => {
                                        let html = ''; 
                                        if (r.annotations) { r.annotations.forEach(e => html += e.name + '<br />'); }
                                        return html;
                                    }},
                                    { name: 'Sharing', property: 'specifiedSharing', formula: (r) => {
                                        if (r.isSharingMissing === true)
                                            return helper.html.render.icon('redFlag') + ' Not specified!';
                                        return r.specifiedSharing;
                                    }},
                                    { name: 'Coverage', type: 'numeric', property: 'fastCoverage', formula: (r) => { 
                                        let html = '';
                                        if (!r.fastCoverage || r.fastCoverage < 0.85) html += helper.html.render.icon('redFlag') + ' ';
                                        html += helper.html.render.percentage(r.fastCoverage); 
                                        return html;
                                    }},
                                    { name: 'Dependencies', formula: (r) => { 
                                        const dep = map.dependencies[r.id]; 
                                        if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                        return helper.html.render.icon('redFlag') + ' No dependency.';
                                    }}
                                ],
                                data: map.apexClasses,
                                sorting: { name: 'Score', order: 'desc' },
                                coloring: { name: 'Score', formula: (s) => { return s > 0 ? helper.html.render.color('highlight') : ''; }},
                                filtering: { formula: (r) => { return r.size !== -1 && r.isTest === false; }},
                                showSearch: true
                            });

                            // Show alert about recompilation
                            if (countRecompileApexClasses > 0) {
                                let html = '';
                                if (countRecompileApexClasses > 0) {
                                    html += 'You have '+countRecompileApexClasses+' Apex classes that need to be <b>recompiled</b>.<br />';
                                    html += 'You need to review the classes that could not have been compiled in this org.<br />';
                                    html += '<br />';
                                }
                                helper.html.modal.show('Action needed on Apex classes in the Org!', html);
                            }

                            // Render the Apex Triggers data in a table
                            helper.html.datatable.create({
                                element: 'datatable-triggers',
                                columns: [
                                    { name: 'Name', formula: (r) => { return helper.html.render.link('/'+r.id, r.name); }},
                                    { name: 'Score', type: 'numeric', formula: (r) => {
                                        let score = 0;
                                        if (!map.dependencies[r.id]) score++;
                                        if (r.isApiVersionOld === true) score++;
                                        if (r.isActive === false) score++;
                                        if (r.length > 5000) score++;
                                        return score;
                                    }},
                                    { name: 'API', type: 'numeric', formula: (r) => {
                                        if (r.isApiVersionOld === true)
                                            return helper.html.render.icon('redFlag') + ' ' + r.apiVersion;
                                        return r.apiVersion;
                                    }},
                                    { name: 'Package', property: 'namespace' },
                                    { name: 'Active', property: 'isActive', formula: (r) => { return helper.html.render.checkbox(r.isActive); }},
                                    { name: 'Status', formula: (r) => { return helper.html.render.icon('greenFlag') + ' OK'; }},
                                    { name: 'Size', type: 'numeric', property: 'length', formula: (r) => { 
                                        if (r.length > 5000) 
                                            return helper.html.render.icon('redFlag') + ' ' + r.length;
                                        return r.length;
                                    }},
                                    { name: 'SObject', formula: (r) => { 
                                        const objName = map.customObjects[r.sobject];
                                        return objName ? objName.developerName : r.sobject;
                                    }},
                                    { name : '*Insert', property: 'beforeInsert', formula: (r) => { return helper.html.render.checkbox(r.beforeInsert); }},
                                    { name : 'Insert*', property: 'afterInsert', formula: (r) => { return helper.html.render.checkbox(r.afterInsert); }},
                                    { name : '*Update', property: 'beforeUpdate', formula: (r) => { return helper.html.render.checkbox(r.beforeUpdate); }},
                                    { name : 'Update*', property: 'afterUpdate', formula: (r) => { return helper.html.render.checkbox(r.afterUpdate); }},
                                    { name : '*Delete', property: 'beforeDelete', formula: (r) => { return helper.html.render.checkbox(r.beforeDelete); }},
                                    { name : 'Delete*', property: 'afterDelete', formula: (r) => { return helper.html.render.checkbox(r.afterDelete); }},
                                    { name : 'Undelete*', property: 'afterUndelete', formula: (r) => { return helper.html.render.checkbox(r.afterUndelete); }},
                                    { name: 'Annotations', formula: (r) => {
                                        let html = ''; 
                                        if (r.annotations) { r.annotations.forEach(e => html += e.name + '<br />'); }
                                        return html;
                                    }},
                                    { name: 'Dependencies', formula: (r) => { 
                                        const dep = map.dependencies[r.id]; 
                                        if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                        return helper.html.render.icon('redFlag') + ' No dependency.';
                                    }}
                                ],
                                data: map.apexTriggers,
                                sorting: { name: 'Score', order: 'desc' },
                                coloring: { name: 'Score', formula: (s) => { return s > 0 ? helper.html.render.color('highlight') : ''; }},
                                showSearch: true
                            });
                        },
                        actions: { 
                            exportTable: [{
                                table: 'datatable-classes',
                                visibleTab: 'tab-default-classes__item',
                                filename: 'ApexClasses'
                            }, {
                                table: 'datatable-triggers',
                                visibleTab: 'tab-default-triggers__item',
                                filename: 'ApexTriggers'
                            }],
                            clearCache: { 
                                show: true 
                            },
                            help: {
                                content: [
                                    'This page shows the Apex classes and triggers.',
                                    'The <b>SCORE</b> for apex classes is computed with the following rule: '+
                                        '<ul class="slds-list_dotted"><li><code>+1</code> if the apex class is not used (in other words it has no dependency),</li>'+
                                        '<li><code>+1</code> if the API version of the class is too old (3 years old),</li>'+
                                        '<li><code>+1</code> if the <i>with or without sharing</i> option is not clearly specified (only if the class is not an interface and not a Test class,</li>'+
                                        '<li><code>+1</code> if the class needs recompilation.</li>'+
                                        '<li><code>+1</code> if the class needs has no coverage or less than 85% code coverage.</li></ul>',
                                    'The <b>SCORE</b> for apex triggers is computed with the following rule: '+
                                        '<ul class="slds-list_dotted"><li><code>+1</code> if the apex trigger is not used (in other words it has no dependency),</li>'+
                                        '<li><code>+1</code> if the API version of the trigger is too old (3 years old),</li>'+
                                        '<li><code>+1</code> if the trigger needs recompilation,</li>'+
                                        '<li><code>+1</code> if the trigger is inactive (what is the use of an inactive trigger, why not delete it?).</li>'+
                                        '<li><code>+1</code> if the trigger has more than 5000 characters without comments (in that case we suspect logic!).</ul>',
                                    'The <b>DEPENDENCIES</b> is showing where the classes or triggers is used and '+
                                        'what it is using. You can click on each diagram to have it shown in '+
                                        'a dialog box.'
                                ]
                            }
                        }
                    });
                }
            </script>
        </apex:define>
    </apex:composition>
</apex:page>