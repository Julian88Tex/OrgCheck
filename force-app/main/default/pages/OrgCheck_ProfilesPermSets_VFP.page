<apex:page >
    <apex:composition template="OrgCheck_PageTemplate_VFT">
        <apex:define name="text_page_title">
            Profiles and Permissions
        </apex:define>
        <apex:define name="text_page_subtitle">
            Non User Specific Profile and Permissions Overview
        </apex:define>
        <apex:define name="html_actions">
        </apex:define>
        <apex:define name="html_content_core">
            <div class="slds-tabs_default">
                <ul class="slds-tabs_default__nav" role="tablist">
                    <li class="slds-tabs_default__item slds-is-active" title="Profiles" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-default-profiles" id="tab-default-profiles__item">Profiles</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Permission Sets" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-permsets" id="tab-default-permsets__item">Permission Sets</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Login Hours Restrictions" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-loginhours" id="tab-default-loginhours__item">Login Hours Restrictions</a>
                    </li>
                    <li class="slds-tabs_default__item" title="IP Ranges Restrictions" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-ipranges" id="tab-default-ipranges__item">IP Range Restrictions</a>
                    </li>
                </ul>
                <div id="tab-default-profiles" class="slds-tabs_default__content slds-show" role="tabpanel" aria-labelledby="tab-default-profiles__item">
                    <div id="datatable-profiles" />
                </div>
                <div id="tab-default-permsets" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-permsets__item">
                    <div id="datatable-permissionSets" />
                </div>
                <div id="tab-default-loginhours" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-loginhours__item">
                    <div id="datatable-profileLoginHours" />
                </div>
                <div id="tab-default-ipranges" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-ipranges__item">
                    <div id="datatable-profileRangeIPs" />
                </div>
            </div>
        </apex:define>
        <apex:define name="html_start_definition_script">
            <script>
                function start2(controller, helper) {

                    // Initialize TABS bindings
                    helper.html.tabs.initialize('slds-tabs_default__item', 'slds-tabs_default__content', 'slds-button');

                    // =================================
                    // RUN CONTROLLER
                    // =================================
                    controller.run({
                        datasets: [ 'profiles', 'permissionSets', 'permissionSetAssignments', 'profileLoginRestrictions' ],
                        onRecords: function(map) { 

                            // -------------------------------------------
                            // PROFILES
                            // -------------------------------------------
                            helper.html.datatable.create({
                                element: 'datatable-profiles',
                                columns: [
                                    { name: 'Name', formula: (r) => { return helper.html.render.link('/'+r.id, r.name); }},
                                    { name: 'Score', formula: (r) => { 
                                        let score = 0;
                                        if (r.isUnusedCustom === true) score++;
                                        if (r.isUndescribedCustom === true) score++;
                                        return score;
                                    }},
                                    { name: 'Custom', property: 'isCustom', formula: (r) => { return helper.html.render.checkbox(r.isCustom); }},
                                    { name: 'License', property: 'license' },
                                    { name: 'User Type', property: 'userType' },
                                    { name: 'Package', property: 'package' },
                                    { name: 'Number of active users', formula: (r) => { 
                                        if (r.isUnusedCustom === true) {
                                            return helper.html.render.icon('redFlag') + ' No user for this custom profile!'; 
                                        }                               
                                        if (r.membersCount < 101) return helper.html.render.icon('greenFlag') + ' ' + r.membersCount + ' user' + (r.membersCount>1?'s':'');
                                        return helper.html.render.icon('greenFlag') + ' More than 100 users';
                                    }},
                                    { name: 'Description', formula: (r) => {
                                        if (r.isUndescribedCustom === true) {
                                            return helper.html.render.icon('redFlag') + ' You should set a description to this custom profile!';
                                        }
                                        return r.description;
                                    }}
                                ],
                                data: map.profiles,
                                sorting: { name: 'Score', order: 'desc' },
                                coloring: { name: 'Score', formula: (s) => { return s > 0 ? helper.html.render.color('highlight') : ''; }},
                                showSearch: true
                            });

                            // -------------------------------------------
                            // PROFILE LOGIN RESTRICTIONS
                            // -------------------------------------------
                            helper.html.datatable.create({
                                element: 'datatable-profileLoginHours',
                                columns: [
                                    { name: 'Profile', formula: (r) => { return helper.html.render.link('/'+r.id, r.name); }},
                                    { name: 'Monday', formula: (r) => { return r.loginHours.monday ? r.loginHours.monday.from + ' to ' + r.loginHours.monday.to : '' }},
                                    { name: 'Tuesday', formula: (r) => { return r.loginHours.tuesday ? r.loginHours.tuesday.from + ' to ' + r.loginHours.tuesday.to : '' }},
                                    { name: 'Wednesday', formula: (r) => { return r.loginHours.wednesday ? r.loginHours.wednesday.from + ' to ' + r.loginHours.wednesday.to : '' }},
                                    { name: 'Thursday', formula: (r) => { return r.loginHours.thursday ? r.loginHours.thursday.from + ' to ' + r.loginHours.thursday.to : '' }},
                                    { name: 'Friday', formula: (r) => { return r.loginHours.friday ? r.loginHours.friday.from + ' to ' + r.loginHours.friday.to : '' }},
                                    { name: 'Saturday', formula: (r) => { return r.loginHours.saturday ? r.loginHours.saturday.from + ' to ' + r.loginHours.saturday.to : '' }},
                                    { name: 'Sunday', formula: (r) => { return r.loginHours.sunday ? r.loginHours.sunday.from + ' to ' + r.loginHours.sunday.to : '' }},
                                ],
                                data: map.profileLoginRestrictions,
                                sorting: { name: 'Profile', order: 'asc' },
                                filtering: { formula: (r) => { return r.loginHours ? true : false; }},
                                showSearch: false
                            });

                            helper.html.datatable.create({
                                element: 'datatable-profileRangeIPs',
                                columns: [
                                    { name: 'Profile', formula: (r) => { return helper.html.render.link('/'+r.id, r.name); }},
                                    { name: 'Starts', formula: (r) => { 
                                        let html = '';
                                        r.loginIpRanges.forEach(i => html += i.startAddress + '<br />');
                                        return html;
                                    }},
                                    { name: 'Ends', formula: (r) => { 
                                        let html = '';
                                        r.loginIpRanges.forEach(i => html += i.endAddress + '<br />');
                                        return html;
                                    }},
                                    { name: 'Description', formula: (r) => { 
                                        let html = '';
                                        r.loginIpRanges.forEach(i => html += i.description + '<br />');
                                        return html;
                                    }}
                                ],
                                data: map.profileLoginRestrictions,
                                sorting: { name: 'Profile', order: 'asc' },
                                filtering: { formula: (r) => { return r.loginIpRanges && r.loginIpRanges.length > 0 ? true : false; }},
                                showSearch: false
                            });

                            // -------------------------------------------
                            // PERMISSION SETS
                            // -------------------------------------------
                            const assignmentsPerPS = {};
                            helper.map.iterate2(map.permissionSetAssignments, function(p, i, s) {
                                let assignments = assignmentsPerPS[p.permissionSetId];
                                if (!assignments) {
                                    assignments = assignmentsPerPS[p.permissionSetId] = { assignees: [], uniqueProfiles: {} };
                                }
                                assignments.assignees.push(p.assigneeId);
                                if (!assignments.uniqueProfiles[p.assigneeProfileId]) {
                                    assignments.uniqueProfiles[p.assigneeProfileId] = { count: 1 };
                                } else {
                                    assignments.uniqueProfiles[p.assigneeProfileId].count++;
                                }
                            });
                            helper.html.datatable.create({
                                element: 'datatable-permissionSets',
                                columns: [
                                    { name: 'Name', formula: (r) => { return helper.html.render.link('/'+r.id, r.name); }},
                                    { name: 'Score', formula: (r) => { 
                                        let score = 0;
                                        if (r.isUnusedCustom === true) score++;
                                        if (r.isUndescribedCustom === true) score++;
                                        return score;
                                    }},
                                    { name: 'Custom', property: 'isCustom', formula: (r) => { return helper.html.render.checkbox(r.isCustom); }},
                                    { name: 'License', property: 'license' },
                                    { name: 'Package', property: 'package' },
                                    { name: 'Number of active users', formula: (r) => { 
                                        if (r.isUnusedCustom === true) {
                                            return helper.html.render.icon('redFlag') + ' No user for this custom permission set!'; 
                                        }
                                        const membersCount = assignmentsPerPS[r.id]?.assignees?.length || 0;
                                        if (membersCount < 101) return helper.html.render.icon('greenFlag') + ' ' + membersCount + ' user' + (membersCount>1?'s':'');
                                        return helper.html.render.icon('greenFlag') + ' More than 100 users';
                                    }},
                                    { name: 'Assigned users\'s profiles', formula: (r) => { 
                                        let html = '';
                                        helper.map.iterate2(assignmentsPerPS[r.id]?.uniqueProfiles, function(v, i, l, pid) {
                                            html += helper.html.render.link('/'+pid, map.profiles[pid]?.name) + ' (' + v.count + ')<br />';
                                        });
                                        return html;
                                    }},
                                    { name: 'Description', formula: (r) => {
                                        if (r.isUndescribedCustom === true) {
                                            return helper.html.render.icon('redFlag') + ' You should set a description to this custom permission set!';
                                        }
                                        return r.description;
                                    }}
                                ],
                                data: map.permissionSets,
                                sorting: { name: 'Score', order: 'desc' },
                                coloring: { name: 'Score', formula: (s) => { return s > 0 ? helper.html.render.color('highlight') : ''; }},
                                showSearch: true
                            });
                        },
                        actions: {  
                            clearCache: { 
                                show: true 
                            },
                            exportTable: [{
                                table: 'datatable-profiles',
                                visibleTab: 'tab-default-profiles__item',
                                filename: 'Profiles'
                            }, {
                                table: 'datatable-permissionSets',
                                visibleTab: 'tab-default-permsets__item',
                                filename: 'PermissionSets'
                            }, {
                                table: 'datatable-profileLoginHours',
                                visibleTab: 'tab-default-loginhours__item',
                                filename: 'LoginHoursRestrictions'
                            }, {
                                table: 'datatable-profileRangeIPs',
                                visibleTab: 'tab-default-ipranges__item',
                                filename: 'IPRangesRestrictions'
                            }],
                            help: {
                                content: [
                                    'This page shows the Profiles, the Permission Sets and the Profile Login '+
                                        'restrictions.',
                                    'The <b>SCORE</b> is computed with the following rule: '+
                                        '<ul class="slds-list_dotted"><li><code>+1</code> if the profile/permission set is custom and is not used by any active users, </li>'+
                                        '<li><code>+1</code> if the profile/permission set is custom and has no description.</li></ul>'
                                ]
                            }
                        }
                    });
                }
            </script>
        </apex:define>
    </apex:composition>
</apex:page>