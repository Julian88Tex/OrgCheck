<apex:page >
    <apex:composition template="OrgCheck_PageTemplate_VFT">
        <apex:define name="html_additional_scripttags" />
        <apex:define name="text_page_title">
            Custom Fields
        </apex:define>
        <apex:define name="text_page_subtitle">
            Custom Fields Dependency Overview
        </apex:define>
        <apex:define name="html_actions">
        </apex:define>
        <apex:define name="html_content_core">
            <div id="datatable" />
        </apex:define>
        <apex:define name="html_start_definition_script">
            <script>
                function start2(controller, helper) {
                    controller.run({
                        datasets: [ 'customFields', 'customObjects' ],
                        dependencies: true,
                        onRecords: function(map) {

                            helper.html.datatable.create(
                                'datatable',
                                [
                                    { name: 'Object', formula: (r) => { 
                                        if (r.objectId) {
                                            const objectItem = map.customObjects[r.objectId];
                                            const objectName = objectItem ? objectItem.developerName : undefined;
                                            return helper.html.render.link('/'+r.objectId, objectName);
                                        }
                                        return r.objectName;
                                    }},
                                    { name: 'Field', formula: (r) => { 
                                        return helper.html.render.link('/'+r.id, r.fieldName); 
                                    }},
                                    { name: 'Score', formula: (r) => {
                                        let score = 0;
                                        if (!map.dependencies[r.id]) score++
                                        return score;
                                    }},
                                    { name: 'Package', property: 'packageName' },
                                    { name: 'Full API Name', property: 'fullName' },
                                    { name: 'Dependencies', formula: (r) => { 
                                        const dep = map.dependencies[r.id]; 
                                        if (dep) return helper.html.render.dependencies(r.id, r.fieldName, dep);
                                        return helper.html.render.icon('redFlag') + ' No dependency.';
                                    }}
                                ],
                                map.customFields,
                                { name: 'Score', order: 'desc' },
                                { name: 'Score', formula: (s) => { return s > 0 ? helper.html.render.color('highlight') : ''; }}
                            );
                        },
                        actions: { 
                            exportTable: [{
                                table: 'datatable',
                                filename: 'CustomFields'
                            }],
                            clearCache: { 
                                show: true 
                            },
                            help: {
                                content: [
                                    'This page shows the Custom Fields.',
                                    'The <b>SCORE</b> is computed with the following rule: '+
                                        '<ul class="slds-list_dotted"><li><code>+1</code> if the fields has no dependency.</li></ul>',
                                    'The <b>DEPENDENCIES</b> is showing where the field is used and '+
                                        'what it is using. You can click on each diagram to have it shown in '+
                                        'a dialog box.'
                                ]
                            }
                        }
                    });
                }
            </script>
        </apex:define>
    </apex:composition>
</apex:page>